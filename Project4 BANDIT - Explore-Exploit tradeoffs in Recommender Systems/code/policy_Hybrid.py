import numpy as np
from numpy import dot
from numpy.linalg import inv
from numpy import resize
from numpy import reshape
from math import sqrt


###### global variables ##########
ALPHA = 0.3 # alphs = 1 + sqrt( ln(2/delta) / 2 )
current_article = 0
current_feature = []

k = 36 # 6 * 6 = 36, 6 features of article and 6 features of user
d = 6 # length of user features
A_0 = np.identity(k)
b_0 = np.zeros([k, 1])
A_0_inv = np.identity(k)
beta = np.zeros([k, 1])

Article_A = {}
Article_A_inv = {}
Article_B = {}
Article_b = {}
Article_theta = {}
AllArticles = {}


# # construct dictionary AllArticles

def set_articles(articles):
	global Article_A, Article_b, Article_B, Article_A_inv, Article_theta
	global AllArticles
	AllArticles = articles
	Article_A = dict.fromkeys(articles.keys(), np.identity(d) )
	Article_A_inv = dict.fromkeys(articles.keys(), np.identity(d) )
	Article_B = dict.fromkeys(articles.keys(), np.zeros([d,k]))
	Article_b = dict.fromkeys(articles.keys(), np.zeros([d,1] ) )
	# Article_theta are zero matrix at beginning
	Article_theta = dict.fromkeys(articles.keys(), np.zeros([d,1] ))


def update(reward):	
	if reward != -1:
		global A_0, Article_B, Article_A, Article_b, b_0, Article_theta
		global AllArticles
		A_0 = A_0 + reduce(dot, [Article_B[current_article].T, Article_A_inv[current_article], Article_B[current_article]])
		b_0 = b_0 + reduce(dot, [Article_B[current_article].T, Article_A_inv[current_article], Article_b[current_article]])
		Article_A[current_article] = Article_A[current_article] + dot(current_feature, current_feature.T)
		z_current  = dot(resize(AllArticles[current_article],[d,1]), current_feature.T)
		z_current.resize( [k,1] )
		Article_B[current_article] = Article_B[current_article] + dot(current_feature, z_current.T)	
		Article_b[current_article] = Article_b[current_article] + reward * current_feature
		A_0 = A_0 + dot(z_current,z_current.T) - reduce(dot, [Article_B[current_article].T, Article_A_inv[current_article], Article_B[current_article]])
		b_0 = b_0 + reward*z_current - reduce(dot, [Article_B[current_article].T, Article_A_inv[current_article], Article_b[current_article] ])
		A_0_inv = inv(A_0)
		beta = dot(A_0_inv, b_0)
		Article_theta[current_article] = reduce(dot, [Article_A_inv[current_article], (Article_b[current_article]- dot(Article_B[current_article], beta))])


def reccomend(time, user_features, articles):
	global beta, A_0, b_0, current_feature
	x = resize(user_features,[d,1])
	current_feature = x
	ucb_max = -np.inf
	choosen = 0
	for art in articles:
		# if art not in AllArticles:
		# 	global Article_A, Article_B, Article_b
		# 	Article_A[art] = np.identity(d)
		# 	Article_B[art] = np.zeros([d,k])
		# 	Article_b[art] = np.zeros([d,1])
		# 	AllArticles.add(art)

		
		global AllArticles
		feature_art = resize(AllArticles[art],[d,1])
		z = reshape(dot(feature_art, x.T), [k,1])

		s = reduce(dot, [z.T, A_0_inv, z]) - 2 * reduce(dot, [z.T, A_0_inv, Article_B[art].T, Article_A_inv[art], x ]) + \
		reduce(dot, [x.T, Article_A_inv[art], x ]) + reduce(dot, [x.T, Article_A_inv[art], Article_B[art], A_0_inv, Article_B[art].T, Article_A_inv[art], x])
		ucb_current = dot(z.T, beta) + dot(x.T, Article_theta[art]) + ALPHA * sqrt(s)
		if ucb_current> ucb_max:
			ucb_max = ucb_current
			choosen = art

	global current_article
	current_article = choosen # save the current 
	return choosen



