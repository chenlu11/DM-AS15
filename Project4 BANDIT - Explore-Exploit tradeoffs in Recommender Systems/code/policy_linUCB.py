import numpy as np
from numpy import dot
from numpy.linalg import inv
from numpy import reshape
from math import sqrt
# from multiprocessing import Pool

##### global variables #######
ALPHA = 0.3
d = 6
current_article = 0
current_feature = []

Article_A = {}
Article_b = {}
Article_A_inv = {}
Article_theta = {}
# Article_visited = set()


def set_articles(articles):
	global Article_A, Article_b, Article_A_inv, Article_theta
	# global Article_visited
	# Article_visited = set(articles.keys())
	Article_A = dict.fromkeys(articles.keys(), np.identity(d) )
	Article_b = dict.fromkeys(articles.keys(), np.zeros([d,1] ) )
	Article_A_inv = dict.fromkeys(articles.keys(), np.identity(d) )
	Article_theta = dict.fromkeys(articles.keys(), np.zeros([d,1] ))



def update(reward):
    if reward != -1:
    	global Article_A, Article_b, Article_A_inv, Article_theta
    	Article_A[current_article] = Article_A[current_article] + dot(current_feature, current_feature.T)
    	Article_A_inv[current_article] = inv(Article_A[current_article])
    	Article_b[current_article] = Article_b[current_article] + reward * current_feature
    	Article_theta[current_article] = dot(Article_A_inv[current_article], Article_b[current_article])


def reccomend(time, user_features, articles):
	global current_feature
	x = reshape(user_features,[d,1])
	current_feature = x
	ucb_best = -np.inf
	choosen = 0
	
	for art in articles:
		# global Article_A, Article_b, Article_theta, Article_A_inv	
		# if art not in Article_visited:			
		# 	Article_A[art] = np.identity(d)
		# 	Article_A_inv[art] = np.identity(d)
		# 	Article_b[art] = np.zeros([d,1])
		# 	Article_theta[art] = np.zeros([d,1])
		# 	Article_visited.add(art)
		
		A_inv = Article_A_inv[art]
		# Article_theta[art] = dot(A_inv, Article_b[art])
		ucb_current = dot(Article_theta[art].T, x) + ALPHA * sqrt(reduce(dot, [x.T, A_inv, x]))
		
		if ucb_current> ucb_best:
			ucb_best = ucb_current
			choosen = art
		# p[loc_for_p] = dot(Article_theta[art].T, x) + ALPHA * np.sqrt( dot(x.T, dot(A_inv, x) ) )
		# loc_for_p = loc_for_p + 1

	# position = np.argmax(p)
	# choosen = articles[position]
	global current_article
	current_article = choosen	
	return choosen
